ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ






ЗВІТ
з практичної роботи № 1
з дисципліни «Скриптові мови програмування»











Виконав: 									Прийняв: 
ст. гр ПЗПІ-23-3 				  ст.викл. Сокорчук І.П.  Ромасенко Станіслав 					



Харків 2025

1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	29.05.2025	0.1	Створено розділ «Завдання»
2	29.05.2025	0.1	Створено розділ «Опис Виконаної роботи»
3	29.05.2025	0.1	Створено розділ «Висновок» та Додатки

2 ЗАВДАННЯ
– Розробити Bash-скрипт, який друкує симетричну ялинку на екрані.  
– Використати конструкції if, while, until, for in, for ((…)).  
– Скрипт повинен приймати два аргументи (висота і ширина снігу).  
– У разі неправильних аргументів — виводити помилку.  
– Реалізувати функцію для побудови гілок.  

3 ОПИС ВИКОНАНОЇ РОБОТИ  
Для реалізації поставленого завдання було створено Bash-скрипт `~/pzpi-23-3-romasenko-stanislav-task1`.  
Скрипт отримує два аргументи: висоту ялинки та ширину шару снігу.  

У скрипті реалізовано:  
– перевірку правильності вхідних аргументів з округленням до меншого цілого числа;  
– побудову двоярусної ялинки з гілок, стовбура та шару снігу;  
– використання обов’язкових конструкцій:  
  - `if ... then ... fi` для перевірки аргументів;  
  - `while`, `until`, `for ... in`, `for ((...))` — для генерації рядків гілок;  
– функція `draw_branch`, яка будує ярус гілок на основі переданої висоти та символів `*` і `#`.  

Для побудови ялинки використовувались симетричні рівнобедрені трикутники.  
Кожен рядок відрізняється від попереднього на два символи по ширині.  

Скрипт враховує крайові випадки — при введенні недопустимих значень (наприклад, висота < 17 або ширина < 11)  
виводиться повідомлення про помилку у стандартний потік помилок.  

4 ВИСНОВКИ  
У результаті виконання практичної роботи було розроблено Bash-скрипт,  
який динамічно генерує симетричну ялинку за заданими параметрами.  
Скрипт реалізує перевірку аргументів, використання базових конструкцій та функцію.  
Отримано практичні навички створення Bash-скриптів із використанням умов, циклів та обробки аргументів.  








ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи:  https://drive.google.com/file/d/1Gi2vmSLlB8WW9HUZUemDTGbfFyjEo5gs/view?usp=sharing

Хронологічний опис відеозапису:
00:00 - Привітання
00:10 - Фунцкія Print_centered
01:20 - Ініціалізація змінних
02:10 - if для TOTAL_BRANCH_LINES
02:42 - Функція draw_layer
03:48 - Виклик функції draw_layer двічі
 03:58 - Цикл while для побудови стовбура
04:10 - Цикл for для створення снігу
04:38 - Тестування














ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 - Вигляд ялинки при введенні параметрів 25 19 (Велика ялинка)


Рисунок Б.2 - Вигляд ялинки при введенні параметрів 16 9 (Маленька ялинка)


Рисунок Б.2 - Помилка при введені неправельних параметрів
ДОДАТОК В
Програмний код

#!/bin/bash

print_centered() {
    local content="$1"
    local width="$2"
    local padding=$(( (width - ${#content}) / 2 ))
    local line=""
    for ((i = 0; i < padding; i++)); do
        line+=" "
    done
    line+="$content"
    echo "$line"
}
if [ $# -ne 2 ]; then
    echo "Помилка: потрібно ввести два параметри: висоту і ширину." >&2
    exit 1
fi
H=$(($1 / 1))
W=$(($2 / 1))
TRUNK_HEIGHT=2
SNOW_HEIGHT=1
TRUNK_WIDTH=3
LAYER_WIDTH=$((W - 2))
TOTAL_BRANCH_LINES=$((H - TRUNK_HEIGHT - SNOW_HEIGHT))
if [ "$TOTAL_BRANCH_LINES" -lt 6 ] || [ "$LAYER_WIDTH" -lt 5 ]; then
    echo "Помилка: неможливо побудувати ялинку з такими параметрами." >&2
    exit 2
fi
LINES_PER_LAYER=$((TOTAL_BRANCH_LINES / 2))
draw_layer() {
    local lines=$1
    local max_width=$2
    local width=1
    local i=0
    while [ $i -lt $lines ]; do
        if (( i % 2 == 0 )); then
            char="*"
        else
            char="#"
        fi
        if [ $width -gt $max_width ]; then
            break
        fi
        line=""
        for ((j = 0; j < width; j++)); do
            line+="$char"
        done
        print_centered "$line" "$W"
        i=$((i + 1))
        width=$((width + 2))
    done
}
for round in 1 2; do
    draw_layer "$LINES_PER_LAYER" "$LAYER_WIDTH"
done
count=0
while [ $count -lt $TRUNK_HEIGHT ]; do
    print_centered "###" "$W"
    count=$((count + 1))
done
for ((i=0; i<W; i++)); do
    echo -n "*"
done
echo
